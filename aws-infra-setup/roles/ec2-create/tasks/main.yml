---
#  tasks:
#- name: Install PIP Boto
#  yum: 
#    name: python-pip
#    update_cache: yes 
#    state: present
- name: Install python-Boto
  pip: 
    name: boto
    state: present

#  ec2:
#    key_name: "{{ ec2_launch_key_name }}"
#    instance_type: "{{ ec2_launch_instance_type }}"
#    image: "{{ ec2_launch_image }}"
#    count: "{{ ec2_launch_count }}"
#    group_id: "{{ ec2_launch_SGs }}"
#    region: "{{ ec2_launch_region }}"
#    state: "{{ ec2_launch_state }}"
#    wait: yes
#    instance_tags:
#      Name: "{{ ec2_launch_hostgroup }}"
#  register: ec2

- name: gathering facts
  ec2_vpc_subnet_facts:
    filters:
      "tag:Name":           "{{ aws_env }}_public_az1"
    region: "{{ vpc_region }}"
  register: public_subnet_facts

- name: setting facts
  set_fact:
    public_subnet_ids: "{{ public_subnet_facts.subnets.0.subnet_id }}"

- name: provision EC2 Instance
  ec2:
    key_name: "{{ ec2_key_name }}"
    instance_type: "{{ ec2_instance_type }}"
    region: "{{ vpc_region }}"
    image: "{{ ec2_image }}"
    wait: yes
    group: "{{ public_sg_name }}"
    count: "{{ ec2_count }}"
    vpc_subnet_id: "{{ public_subnet_ids }}"
    assign_public_ip: yes
    instance_tags:
       Name: Webserver
  register: ec2


- name: Add new instance to host group
  add_host:
    hostname: "{{ item.public_ip }}"
    groupname: webserver
    ansible_user: sohan
  with_items: "{{ ec2.instances }}"

- name: Add the newly created EC2 instance(s) to the local host group 
  lineinfile:
    dest: "./hosts" 
    regexp: "{{ item.public_ip }}" 
    insertafter: "[webserver]" 
    line: "{{ item.public_ip }}"
  with_items: "{{ ec2.instances }}"

- name: Wait for SSH to come up
  wait_for:
    host: "{{ item.public_dns_name }}"
    port: 22
    delay: 60
    timeout: 320
    state: started
  with_items: "{{ ec2.instances }}"

- name: sshing into server and copy 
  shell: scp -i {{ ec2_key_name }}.pem sshd_config ec2-user@{{ item.public_ip }}:/home/ec2-user/
  with_items: "{{ec2.instances}}"

- name: replacing sshd_config profile
  shell: ssh -i {{ ec2_key_name }}.pem ec2-user@{{ item.public_ip }} 'sudo cp /home/ec2-user/sshd_config /etc/ssh/sshd_config' 
  with_items: "{{ec2.instances}}"

- name: adding user
  shell: ssh -i {{ ec2_key_name }}.pem ec2-user@{{ item.public_ip }} 'sudo useradd sohan && sudo usermod -aG wheel sohan' 
  with_items: "{{ec2.instances}}"

- name: changing passwd
  shell: ssh -i {{ ec2_key_name }}.pem ec2-user@{{ item.public_ip }} 'echo sohan:yourpassword | sudo chpasswd'
  with_items: "{{ec2.instances}}"

- name: restart sshd service
  shell: ssh -i {{ ec2_key_name }}.pem ec2-user@{{ item.public_ip }} 'sudo systemctl restart sshd'
  with_items: "{{ec2.instances}}"

- name: copying ssh public key to server 
  shell: ssh -i {{ ec2_key_name }}.pem ec2-user@{{ item.public_ip }} 'ssh-copy-id sohan@"{{ item.public_ip }}"' 
  with_items: "{{ec2.instances}}"

- debug:
    msg: Run copy_auth_keys.sh now

- name: removing placeholder sshd_config file
  shell: for i in `cat hosts | awk '{print $1}' | grep -v '\['`; do echo ssh-copy-id sohan@$i >> output.sh ; done; 
  
